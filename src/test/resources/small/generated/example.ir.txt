<Code body of function Lexample.js>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..13]
    -> BB2
    -> BB5
BB2[14..17]
    -> BB3
    -> BB5
BB3[18..19]
    -> BB4
    -> BB5
BB4[20..20]
    -> BB5
BB5[-1..-2]
Instructions:
BB0
BB1
0   v1 = new <JavaScriptLoader,LArray>@0     example.js [0->926] (line 1) [1=[arguments]]
1   v5 = global:global Function              example.js [0->926] (line 1)
2   v2 = construct v5@2 v4:#Lexample.js/f exception:v3example.js [0->926] (line 1)
3   global:global f = v2                     example.js [0->926] (line 1)
4   v10 = global:global Function             example.js [0->926] (line 1)
5   v7 = construct v10@5 v9:#Lexample.js/g exception:v8example.js [0->926] (line 1)
6   global:global g = v7                     example.js [0->926] (line 1)
7   v15 = global:global Function             example.js [0->926] (line 1)
8   v12 = construct v15@8 v14:#Lexample.js/h exception:v13example.js [0->926] (line 1)
9   global:global h = v12                    example.js [0->926] (line 1)
12   v21 = global:global console             example.js [909->916] (line 37) [21=[$$destructure$rcvr4]]
13   check v21                               example.js [909->916] (line 37) [21=[$$destructure$rcvr4]]
BB2
16   v25 = global:global h                   example.js [921->922] (line 37)
17   check v25                               example.js [921->922] (line 37)
BB3
18   v27 = global:global __WALA__int3rnal__globalexample.js [921->924] (line 37)
19   v24 = invoke v25@19 v27 exception:v28   example.js [921->924] (line 37)
BB4
20   v23 = dispatch v22:#log@20 v21,v24 exception:v29example.js [909->925] (line 37) [22=[$$destructure$elt4]21=[$$destructure$rcvr4]]
BB5


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/h)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/h>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/g)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/g>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/f)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/f>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<Code body of function Lexample.js/h>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..8]
    -> BB2
    -> BB6
BB2[9..10]
    -> BB3
    -> BB6
BB3[11..13]
    -> BB4
    -> BB6
BB4[14..15]
    -> BB5
    -> BB6
BB5[16..19]
    -> BB6
BB6[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <JavaScriptLoader,LArray>@0     example.js [111->186] (line 16) [3=[arguments]]
1   v5 = global:global $$undefined           example.js [128->140] (line 17) [5=[x]]
3   v7 = global:global $$undefined           example.js [143->155] (line 18) [7=[y]]
5   v9 = global:global $$undefined           example.js [158->172] (line 19) [9=[z]]
7   v13 = global:global f                    example.js [136->137] (line 17)
8   check v13                                example.js [136->137] (line 17)
BB2
9   v15 = global:global __WALA__int3rnal__globalexample.js [136->139] (line 17)
10   v11 = invoke v13@10 v15 exception:v16   example.js [136->139] (line 17) [11=[x]]
BB3
12   v19 = global:global g                   example.js [151->152] (line 18)
13   check v19                               example.js [151->152] (line 18)
BB4
14   v20 = global:global __WALA__int3rnal__globalexample.js [151->154] (line 18)
15   v17 = invoke v19@15 v20 exception:v21   example.js [151->154] (line 18) [17=[y]]
BB5
17   v22 = binaryop(add) v11 , v17           example.js [166->171] (line 19) [22=[z]11=[x]17=[y]]
19   return v22                              example.js [175->184] (line 20) [22=[z]]
BB6


<Code body of function Lexample.js/f>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <JavaScriptLoader,LArray>@0     example.js [46->73] (line 8) [3=[arguments]]
1   return v4:#1.0                           example.js [63->71] (line 9)
BB2


<Code body of function Lexample.js/g>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..2]
    -> BB2
    -> BB4
BB2[3..4]
    -> BB3
    -> BB4
BB3[5..6]
    -> BB4
BB4[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <JavaScriptLoader,LArray>@0     example.js [75->109] (line 12) [3=[arguments]]
1   v7 = global:global f                     example.js [99->100] (line 13)
2   check v7                                 example.js [99->100] (line 13)
BB2
3   v9 = global:global __WALA__int3rnal__globalexample.js [99->102] (line 13)
4   v5 = invoke v7@4 v9 exception:v10        example.js [99->102] (line 13)
BB3
5   v4 = binaryop(add) v5 , v11:#1.0         example.js [99->106] (line 13)
6   return v4                                example.js [92->107] (line 13)
BB4
