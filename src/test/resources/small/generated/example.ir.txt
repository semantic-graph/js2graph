<Code body of function Lexample.js>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..5]
    -> BB2
    -> BB3
BB2[6..7]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
0   v1 = new <JavaScriptLoader,LArray>@0     example.js [0->386] (line 1) [1=[arguments]]
1   v5 = global:global Function              example.js [0->386] (line 1)
2   v2 = construct v5@2 v4:#Lexample.js/main exception:v3example.js [0->386] (line 1)
3   global:global main = v2                  example.js [0->386] (line 1)
4   v9 = global:global main                  example.js [379->383] (line 21)
5   check v9                                 example.js [379->383] (line 21)
BB2
6   v11 = global:global __WALA__int3rnal__globalexample.js [379->385] (line 21)
7   v8 = invoke v9@7 v11 exception:v12       example.js [379->385] (line 21)
BB3


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/main)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/main>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<Code body of function Lexample.js/main>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..10]
    -> BB2
    -> BB4
BB2[11..14]
    -> BB3
    -> BB4
BB3[15..15]
    -> BB4
BB4[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <JavaScriptLoader,LArray>@0     example.js [0->199] (line 1) [3=[arguments]]
1   v7 = global:global Function              example.js [0->199] (line 1)
2   v4 = construct v7@2 v6:#Lexample.js/main/f exception:v5example.js [0->199] (line 1) [4=[f]]
3   v11 = global:global Function             example.js [0->199] (line 1)
4   v8 = construct v11@4 v10:#Lexample.js/main/g exception:v9example.js [0->199] (line 1) [8=[g]]
5   v15 = global:global Function             example.js [0->199] (line 1)
6   v12 = construct v15@6 v14:#Lexample.js/main/h exception:v13example.js [0->199] (line 1) [12=[h]]
9   v20 = global:global console              example.js [180->187] (line 16) [20=[$$destructure$rcvr3]]
10   check v20                               example.js [180->187] (line 16) [20=[$$destructure$rcvr3]]
BB2
13   v25 = global:global __WALA__int3rnal__globalexample.js [192->195] (line 16)
14   v23 = invoke v12@14 v25 exception:v26   example.js [192->195] (line 16) [12=[h]]
BB3
15   v22 = dispatch v21:#log@15 v20,v23 exception:v27example.js [180->196] (line 16) [21=[$$destructure$elt3]20=[$$destructure$rcvr3]]
BB4


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/main/f)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/main/f>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/main/g)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/main/g>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<ctor for <JavaScriptLoader,LFunction>(Lexample.js/main/h)>
CFG:
BB0[0..0]
    -> BB1
    -> BB7
BB1[1..1]
    -> BB2
BB2[2..2]
    -> BB3
    -> BB7
BB3[3..3]
    -> BB4
    -> BB7
BB4[4..5]
    -> BB5
BB5[6..6]
    -> BB6
BB6[7..7]
    -> BB7
BB7[-1..-2]
Instructions:
BB0
0   v2 = new <JavaScriptLoader,LArray>@0     
BB1
1   v4 = getfield < JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > v1
BB2
2   v5 = new <JavaScriptLoader,Lexample.js/main/h>@2
BB3
3   v7 = new <JavaScriptLoader,LObject>@3    
BB4
4   set_prototype(v5, v4)                    
5   putfield v5.< JavaScriptLoader, LRoot, prototype, <JavaScriptLoader,LRoot> > = v7
BB5
6   putfield v7.< JavaScriptLoader, LRoot, constructor, <JavaScriptLoader,LRoot> > = v5
BB6
7   return v5                                
BB7


<Code body of function Lexample.js/main/h>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..6]
    -> BB2
    -> BB6
BB2[7..8]
    -> BB3
    -> BB6
BB3[9..11]
    -> BB4
    -> BB6
BB4[12..13]
    -> BB5
    -> BB6
BB5[14..16]
    -> BB6
BB6[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <JavaScriptLoader,LArray>@0     example.js [101->176] (line 10) [3=[arguments]]
1   v5 = global:global $$undefined           example.js [120->133] (line 11) [5=[x]]
3   v7 = global:global $$undefined           example.js [138->154] (line 12) [7=[y]]
5   v11 = lexical:f@Lexample.js/main         example.js [128->129] (line 11)
6   check v11                                example.js [128->129] (line 11)
BB2
7   v13 = global:global __WALA__int3rnal__globalexample.js [128->132] (line 11)
8   v9 = invoke v11@8 v13,v14:#1.0 exception:v15example.js [128->132] (line 11) [9=[x]]
BB3
10   v18 = lexical:g@Lexample.js/main        example.js [146->147] (line 12)
11   check v18                               example.js [146->147] (line 12)
BB4
12   v19 = global:global __WALA__int3rnal__globalexample.js [146->153] (line 12)
13   v16 = invoke v18@13 v19,v20:#2.0,v21:#3.0 exception:v22example.js [146->153] (line 12) [16=[y]]
BB5
15   v23 = binaryop(add) v9 , v16            example.js [166->171] (line 13) [9=[x]16=[y]]
16   return v23                              example.js [159->172] (line 13)
BB6


<Code body of function Lexample.js/main/f>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   v4 = new <JavaScriptLoader,LArray>@0     example.js [20->53] (line 2) [4=[arguments]]
1   return v3                                example.js [40->49] (line 3) [3=[x]]
BB2


<Code body of function Lexample.js/main/g>
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..2]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   v5 = new <JavaScriptLoader,LArray>@0     example.js [57->97] (line 6) [5=[arguments]]
1   v6 = binaryop(add) v3 , v4               example.js [87->92] (line 7) [3=[x]4=[y]]
2   return v6                                example.js [80->93] (line 7)
BB2
